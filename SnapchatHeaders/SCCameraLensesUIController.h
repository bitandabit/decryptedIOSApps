//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import "SCBaseLensesUIController.h"

#import "SCArcadiaInfoContentViewDelegate-Protocol.h"
#import "SCArcadiaViewControllerDelegate-Protocol.h"
#import "SCLensLogoPickerControllerDelegate-Protocol.h"
#import "UIGestureRecognizerDelegate-Protocol.h"

@class NSString, SCArcadiaViewController, SCCameraOverlayView, SCGrowingButton, SCLensAnalyticsDataManger, SCLensCoreAnalyticsListener, SCLensInfoController, SCLensLogoPickerController, SCLensUnlockedFilterImageHelper, SCOnDemandLensSubPickerController, SCPreviewTooltipBalloon, SCSnappablePlayButton, UIButton, UITapGestureRecognizer;
@protocol SCCameraOverlayDelegate, SCLensCameraScreenDataProviderProtocol, SCLensCarouselPresenterProtocol;

@interface SCCameraLensesUIController : SCBaseLensesUIController <SCArcadiaViewControllerDelegate, SCLensLogoPickerControllerDelegate, SCArcadiaInfoContentViewDelegate, UIGestureRecognizerDelegate>
{
    SCArcadiaViewController *_lensDiscoveryController;
    SCLensLogoPickerController *_logoPickerController;
    SCGrowingButton *_openArcadiaButton;
    SCGrowingButton *_removeArcadiaObjectButton;
    SCLensCoreAnalyticsListener *_coreAnalyticsListener;
    SCLensUnlockedFilterImageHelper *_unlockedFilterImageHelper;
    SCOnDemandLensSubPickerController *_onDemandLensSubPickerController;
    SCSnappablePlayButton *_snappablesPlayButton;
    UITapGestureRecognizer *_snappablesPlayButtonGestureRecognizer;
    SCGrowingButton *_fullscreenCloseButton;
    _Bool _areAllInterfaceElementsHidden;
    id <SCLensCarouselPresenterProtocol> _currentCarouselPresenter;
    id <SCCameraOverlayDelegate> _cameraViewDelegate;
    SCGrowingButton *_infoButton;
    UIButton *_ctaButton;
    SCLensAnalyticsDataManger *_lensAnalyticsDataManager;
    SCLensInfoController *_lensInfoController;
    SCGrowingButton *_lensesOpenCloseButton;
    SCGrowingButton *_lensPinButton;
    SCPreviewTooltipBalloon *_lensPinTooltip;
}

@property(retain, nonatomic) SCPreviewTooltipBalloon *lensPinTooltip; // @synthesize lensPinTooltip=_lensPinTooltip;
@property(retain, nonatomic) SCGrowingButton *lensPinButton; // @synthesize lensPinButton=_lensPinButton;
@property(retain, nonatomic) SCGrowingButton *lensesOpenCloseButton; // @synthesize lensesOpenCloseButton=_lensesOpenCloseButton;
@property(retain, nonatomic) SCLensInfoController *lensInfoController; // @synthesize lensInfoController=_lensInfoController;
@property(retain, nonatomic) SCLensAnalyticsDataManger *lensAnalyticsDataManager; // @synthesize lensAnalyticsDataManager=_lensAnalyticsDataManager;
@property(retain, nonatomic) UIButton *ctaButton; // @synthesize ctaButton=_ctaButton;
@property(retain, nonatomic) SCGrowingButton *infoButton; // @synthesize infoButton=_infoButton;
@property(nonatomic) __weak id <SCCameraOverlayDelegate> cameraViewDelegate; // @synthesize cameraViewDelegate=_cameraViewDelegate;
@property(retain, nonatomic) id <SCLensCarouselPresenterProtocol> currentCarouselPresenter; // @synthesize currentCarouselPresenter=_currentCarouselPresenter;
- (void).cxx_destruct;
- (void)lensCarouselPresenter:(id)arg1 didScroll:(id)arg2 selectedCellDistance:(double)arg3;
- (id)state;
- (_Bool)isCurrentLensDownloadingInProgress;
- (_Bool)blockTouchesForCurrentLensWithNormalizedTouchPoints:(id)arg1 touchTypeMask:(unsigned long long)arg2;
- (id)pendingDeeplinkBitmojiLensId;
- (id)activeLensIcon;
- (void)ctaButtonPressed;
- (void)setLensCtaButtonHidden:(_Bool)arg1;
- (void)updateCtaButtonContentAndConstraints;
- (void)infoButtonPressed;
- (void)setLensInfoButtonHidden:(_Bool)arg1;
- (void)updateInfoButtonConstraints;
- (id)pageViewName;
- (void)_hideOnDemandLensSubPickerIfNeededWithCompletion:(CDUnknownBlockType)arg1;
- (void)_presentOnDemandLensSubPicker;
- (void)_lensCoreHandledAnExceptionNotificationReceived:(id)arg1;
- (void)removeCurrentArcadiaObject;
- (void)setRemoveArcadiaObjectButtonVisible:(_Bool)arg1 animated:(_Bool)arg2;
- (void)lensPinButtonPressed;
- (void)hideLensPinTooltipAnimated:(_Bool)arg1;
- (void)showLensPinTooltip;
- (void)lensesOpenCloseButtonPressed;
- (void)setLensesOpenCloseButtonVisible:(_Bool)arg1 animated:(_Bool)arg2;
- (void)arcadiaViewController:(id)arg1 didFinishPickingLenses:(id)arg2;
- (void)effectComponent:(id)arg1 effectId:(id)arg2 performInterfaceAction:(unsigned long long)arg3 interfaceElement:(unsigned long long)arg4 interfaceData:(id)arg5;
- (void)_setSnapButtonHidden:(_Bool)arg1;
- (void)_fullscreenCloseButtonTapped:(id)arg1;
- (void)_setAllInterfaceElementsHidden:(_Bool)arg1;
- (_Bool)pointInsideAnyLensViewButton:(struct CGPoint)arg1;
- (_Bool)pointInsideAnyLensView:(struct CGPoint)arg1;
- (void)_hideSnappablesPlayButton;
- (void)_showSnappablesPlayButton;
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (void)_snappablesPlayButtonTapped:(id)arg1;
- (void)effectComponent:(id)arg1 didTurnOffEffectWithId:(id)arg2 features:(unsigned long long)arg3;
- (void)effectComponent:(id)arg1 didTurnOnEffectWithId:(id)arg2 features:(unsigned long long)arg3;
- (void)cleanup;
- (void)activateLens:(id)arg1 launchData:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)lensCarouselPresenter:(id)arg1 didSelectLens:(id)arg2 index:(unsigned long long)arg3 totalLensesCount:(unsigned long long)arg4;
- (void)updateUIElementsVisibilityForLens:(id)arg1;
- (_Bool)isActiveCommunityLens;
- (void)setLensesActive:(_Bool)arg1 appearanceConfiguration:(id)arg2 activationState:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (_Bool)pointInsideLensCtaButton:(struct CGPoint)arg1;
- (_Bool)pointInsideLensInfoButton:(struct CGPoint)arg1;
- (_Bool)pointInsideLensLogoPickerUI:(struct CGPoint)arg1;
- (_Bool)pointInsideOnDemandLensSubPicker:(struct CGPoint)arg1;
- (_Bool)_pointInsideLensView:(struct CGPoint)arg1 cellFramesOnly:(_Bool)arg2;
- (void)hideLensesUI:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)hideLensesUI:(_Bool)arg1;
- (void)showLensesUI:(_Bool)arg1;
- (void)showLensesUI:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;
- (void)applyCollectionViewConstraints:(id)arg1;
- (void)arcadiaInfoContentView:(id)arg1 didTapShareForText:(id)arg2;
- (void)logoPickerControllerDidTapInfo:(id)arg1;
- (_Bool)logoPickerController:(id)arg1 shouldChangeFrame:(struct CGRect)arg2 forView:(id)arg3;
- (id)removeArcadiaObjectButton;
- (id)openArcadiaButton;
- (id)logoPickerController;
- (void)presentArcadia;
- (id)lensFpsLogger;
- (void)dealloc;
- (id)initWithParentViewContainer:(id)arg1 hidableViewContainer:(id)arg2 cameraViewDelegate:(id)arg3 userSession:(id)arg4 lensBitmojiDelegate:(id)arg5 lensUserInterfaceDelegate:(id)arg6;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) id <SCLensCameraScreenDataProviderProtocol> lensDataProvider; // @dynamic lensDataProvider;
@property(nonatomic) __weak SCCameraOverlayView *parentView; // @dynamic parentView;
@property(readonly) Class superclass;

@end

