//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Sep 17 2017 16:24:48).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <Foundation/NSObject.h>

@class NSArray, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, SCCounters, SCEventUploader, SCStartupContext;
@protocol SCLoggerAmplitudeProtocol, SCPerforming;

@interface SCLogger : NSObject
{
    SCCounters *_counters;
    SCEventUploader *_eventUploader;
    NSMutableSet *_uniqueEvents;
    NSMutableDictionary *_timers;
    NSMutableDictionary *_timedEvents;
    SCStartupContext *_startupContext;
    CDUnknownBlockType _userProvider;
    CDUnknownBlockType _sendEventsBlock;
    CDUnknownBlockType _didLogBlizzardEventCallback;
    CDUnknownBlockType _didLogOpsDataPipelineEventCallback;
    CDUnknownBlockType _didEndPerfEventCallback;
    CDUnknownBlockType _didCancelTimerEventsCallback;
    id <SCLoggerAmplitudeProtocol> _blizzardLogger;
    CDUnknownBlockType _reachabilityProvider;
    CDUnknownBlockType _isLowPowerModeEnabledCallback;
    CDUnknownBlockType _isTravelModeEnabledCallback;
    CDUnknownBlockType _isProtectedDataAvailable;
    CDUnknownBlockType _mainThreadDelaysProvider;
    CDUnknownBlockType _currentHostProvider;
    CDUnknownBlockType _frameRatesProvider;
    NSArray *_performanceEvents;
    NSMutableArray *_savedEvents;
    id <SCPerforming> _performer;
}

+ (_Bool)shouldReport;
+ (_Bool)shouldReportForPercentage:(double)arg1;
+ (_Bool)shouldUnsample;
+ (id)sharedInstance;
+ (id)perfMetricsAsString;
+ (id)perfMetrics;
+ (id)networkTrafficDataStatistic;
+ (unsigned long long)currentThreadCount;
+ (double)cpuUsage;
+ (id)diskUsageParams_DEPRECATED:(id)arg1;
+ (id)_getTotalAndSubfolderSizesMBInDirectory:(id)arg1 cancelationToken:(id)arg2;
+ (unsigned long long)diskspaceFreeMB;
+ (unsigned long long)diskspaceUsedMB;
+ (double)memoryInactiveUsedMB;
+ (double)memoryActiveUsedMB;
+ (double)memoryWireUsedMB;
+ (double)memoryTotalUsedMB;
+ (double)memoryFreeMB;
+ (double)memoryVirtualMB;
+ (double)memoryUsedMB;
+ (double)memoryUsedBytes;
@property(retain, nonatomic) id <SCPerforming> performer; // @synthesize performer=_performer;
@property(retain, nonatomic) NSMutableArray *savedEvents; // @synthesize savedEvents=_savedEvents;
@property(retain, nonatomic) NSArray *performanceEvents; // @synthesize performanceEvents=_performanceEvents;
@property(copy, nonatomic) CDUnknownBlockType frameRatesProvider; // @synthesize frameRatesProvider=_frameRatesProvider;
@property(copy, nonatomic) CDUnknownBlockType currentHostProvider; // @synthesize currentHostProvider=_currentHostProvider;
@property(copy, nonatomic) CDUnknownBlockType mainThreadDelaysProvider; // @synthesize mainThreadDelaysProvider=_mainThreadDelaysProvider;
@property(copy, nonatomic) CDUnknownBlockType isProtectedDataAvailable; // @synthesize isProtectedDataAvailable=_isProtectedDataAvailable;
@property(copy, nonatomic) CDUnknownBlockType isTravelModeEnabledCallback; // @synthesize isTravelModeEnabledCallback=_isTravelModeEnabledCallback;
@property(copy, nonatomic) CDUnknownBlockType isLowPowerModeEnabledCallback; // @synthesize isLowPowerModeEnabledCallback=_isLowPowerModeEnabledCallback;
@property(copy, nonatomic) CDUnknownBlockType reachabilityProvider; // @synthesize reachabilityProvider=_reachabilityProvider;
@property(retain, nonatomic) id <SCLoggerAmplitudeProtocol> blizzardLogger; // @synthesize blizzardLogger=_blizzardLogger;
@property(copy, nonatomic) CDUnknownBlockType didCancelTimerEventsCallback; // @synthesize didCancelTimerEventsCallback=_didCancelTimerEventsCallback;
@property(copy, nonatomic) CDUnknownBlockType didEndPerfEventCallback; // @synthesize didEndPerfEventCallback=_didEndPerfEventCallback;
@property(copy, nonatomic) CDUnknownBlockType didLogOpsDataPipelineEventCallback; // @synthesize didLogOpsDataPipelineEventCallback=_didLogOpsDataPipelineEventCallback;
@property(copy, nonatomic) CDUnknownBlockType didLogBlizzardEventCallback; // @synthesize didLogBlizzardEventCallback=_didLogBlizzardEventCallback;
@property(copy, nonatomic) CDUnknownBlockType sendEventsBlock; // @synthesize sendEventsBlock=_sendEventsBlock;
@property(copy, nonatomic) CDUnknownBlockType userProvider; // @synthesize userProvider=_userProvider;
@property(retain, nonatomic) SCStartupContext *startupContext; // @synthesize startupContext=_startupContext;
@property(retain, nonatomic) NSMutableDictionary *timedEvents; // @synthesize timedEvents=_timedEvents;
@property(retain, nonatomic) NSMutableDictionary *timers; // @synthesize timers=_timers;
@property(retain, nonatomic) NSMutableSet *uniqueEvents; // @synthesize uniqueEvents=_uniqueEvents;
@property(retain, nonatomic) SCEventUploader *eventUploader; // @synthesize eventUploader=_eventUploader;
@property(readonly, nonatomic) SCCounters *counters; // @synthesize counters=_counters;
- (void).cxx_destruct;
- (id)markEndSessionForType:(id)arg1;
- (_Bool)markStartSessionForType:(id)arg1 withStartTime:(double)arg2;
- (void)syncLogEventToEventLogger:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 samplePercentage:(double)arg5;
- (void)synchronouslyLogEvent:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 samplePercentage:(double)arg5;
- (void)setEventUploaderBatchSizeLimit:(unsigned long long)arg1;
- (void)logEndSessionForType:(id)arg1;
- (id)histogramBucketForTimeLapsed:(double)arg1 bucketSize:(double)arg2 numberBuckets:(int)arg3;
- (void)logStartSessionForType:(id)arg1;
- (void)updateBlizzardValidationServerUrl:(id)arg1;
- (void)logUserNotTrackedEvent:(id)arg1;
- (void)logUserTrackedEvent:(id)arg1;
- (void)getAndClearEventsWithBlock:(CDUnknownBlockType)arg1;
- (void)logJSONSerializationError:(id)arg1 endpoint:(id)arg2 parameters:(id)arg3;
- (void)logEventToEventLogger:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 samplePercentage:(double)arg5;
- (void)logEventToEventLogger:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4;
- (void)logEventToEventLogger:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3;
- (void)logUnsampledEventToEventLogger:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4;
- (void)logEvent:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4 samplePercentage:(double)arg5;
- (void)logEvent:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4;
- (void)logUnsampledEvent:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3 metrics:(id)arg4;
- (void)logEvent:(id)arg1 parameters:(id)arg2 secretParameters:(id)arg3;
- (void)logEvent:(id)arg1 parameters:(id)arg2;
- (void)logEvent:(id)arg1;
- (void)forceUploadEvents;
- (void)logSavedEvents;
- (void)attemptResumeBlizzardSession:(long long)arg1;
- (void)startServicesWithBlizzardLogger:(id)arg1 userProvider:(CDUnknownBlockType)arg2 sendEventsBlock:(CDUnknownBlockType)arg3 didLogOpsDataPipelineEventCallback:(CDUnknownBlockType)arg4 didEndPerfEventCallback:(CDUnknownBlockType)arg5 didCancelTimerEventsCallback:(CDUnknownBlockType)arg6 reachabilityProvider:(CDUnknownBlockType)arg7 isLowPowerModeEnabledCallBack:(CDUnknownBlockType)arg8 isTravelModeEnabledCallBack:(CDUnknownBlockType)arg9 isProtectedDataAvailable:(CDUnknownBlockType)arg10 mainThreadDelaysProvider:(CDUnknownBlockType)arg11 currentHostProvider:(CDUnknownBlockType)arg12 frameRateProvider:(CDUnknownBlockType)arg13;
- (id)init;
- (double)appStartupCompleteTime;
- (void)setAppStartupCompleteTime:(double)arg1;
- (void)endOrCancelTimedEvent:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 shouldEnd:(_Bool)arg4;
- (void)updateContentReadyAndFirstItemReadyEventswithNetworkStepName:(id)arg1;
- (void)updateContentReadyAndFirstItemReadyEventswithParameters:(id)arg1;
- (void)cancelPerfEventsWhenLoggedOut;
- (void)cancelPerfEventsWhenOpenAppFromQuickAction;
- (void)cancelPerfEventsWhenOpenAppFromDeepLink;
- (void)cancelPerfEventsWhenDiscoverEditionViewAppear;
- (void)cancelPerfEventsWhenChatViewAppear;
- (void)cancelPerfEventsForStartupToAllViews;
- (void)logCancellationPerfEventsForStartupToCameraView;
- (void)cancelPerfEventsForStartupToFeedStoryView;
- (void)cancelPerfEventsWhenVisibleVCIsNotMainVC;
- (void)cancelPerfEventsWhenPreviewViewAppear;
- (void)cancelPerfEventsWhenMyFriendsViewFullyDisappear;
- (void)cancelPerfEventsWhenFeedViewFullyDisappear;
- (void)startPerfEventsWhenAppStartupFromBackgroundWithNotification;
- (void)startPerfEventsWhenAppStartupFromBackgroundWithTimeLapse:(double)arg1;
- (void)startPerfEventsWhenAppStartupFromBackgroundWithProtectedDataUnavailable;
- (void)startPerfEventsWhenAppStartupFromKilledStateWithNotification;
- (void)startPerfEventsWhenAppStartupFromKilledStateEarlyWithTimeLapse:(double)arg1 preOpenLatency:(double)arg2;
- (void)startPerfEventsWhenAppStartupFromKilledState;
- (id)eventsWithDelaysAttached;
- (void)logEventWithAttachedDelays:(id)arg1;
- (void)_setStartParameters:(id)arg1 parameters:(id)arg2;
- (void)removeUniqueEvents;
- (void)cancelAllLogTimedEvents;
- (void)cancelLogTimedEvents:(id)arg1;
- (void)cancelLogTimedEventsWithName:(id)arg1;
- (void)cancelLogTimedEvent:(id)arg1 uniqueId:(id)arg2;
- (id)onCancelEventDependencies;
- (void)addSplitPoint:(id)arg1 atTime:(double)arg2 toEvent:(id)arg3;
- (void)updateLogTimedEvent:(id)arg1 uniqueId:(id)arg2 splitPoint:(id)arg3 time:(double)arg4;
- (void)updateLogTimedEvent:(id)arg1 uniqueId:(id)arg2 splitPoint:(id)arg3;
- (void)updateLogTimedEvent:(id)arg1 uniqueId:(id)arg2 update:(CDUnknownBlockType)arg3;
- (void)updateLogTimedEvent:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3;
- (void)updateLogTimedEventStart:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3;
- (void)updateLogTimedEventStart:(id)arg1 uniqueId:(id)arg2;
- (void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 update:(CDUnknownBlockType)arg3 shouldLog:(CDUnknownBlockType)arg4 samplePercentage:(double)arg5 endTime:(id)arg6;
- (void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 update:(CDUnknownBlockType)arg3;
- (void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 shouldLog:(CDUnknownBlockType)arg4 samplePercentage:(double)arg5 endTime:(id)arg6;
- (void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 samplePercentage:(double)arg4 endTime:(id)arg5;
- (void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 samplePercentage:(double)arg4;
- (void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 endTime:(id)arg4;
- (void)logTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3;
- (void)conditionallyLogTimedEventEnd:(id)arg1 uniqueId:(id)arg2 parameters:(id)arg3 shouldLog:(CDUnknownBlockType)arg4;
- (void)logNetworkStepToEvent:(id)arg1 uniqueId:(id)arg2 stepName:(id)arg3;
- (void)logStepEndForEvent:(id)arg1 uniqueId:(id)arg2 stepName:(id)arg3 sampled:(_Bool)arg4;
- (void)logStepToEvent:(id)arg1 uniqueId:(id)arg2 stepName:(id)arg3;
- (void)disableResetForEvent:(id)arg1 uniqueId:(id)arg2;
- (void)useT0ForEvent:(id)arg1 uniqueId:(id)arg2;
- (void)logTimedEventStart:(id)arg1 uniqueId:(id)arg2 isUniqueEvent:(_Bool)arg3 parameters:(id)arg4 shouldLogStartTime:(_Bool)arg5 sampled:(_Bool)arg6;
- (void)logTimedEventStart:(id)arg1 uniqueId:(id)arg2 isUniqueEvent:(_Bool)arg3 parameters:(id)arg4 shouldLogStartTime:(_Bool)arg5;
- (void)logUnsampledTimedEventStart:(id)arg1 uniqueId:(id)arg2 isUniqueEvent:(_Bool)arg3 parameters:(id)arg4;
- (void)logTimedEventStart:(id)arg1 uniqueId:(id)arg2 isUniqueEvent:(_Bool)arg3 parameters:(id)arg4;
- (void)logTimedEventStart:(id)arg1 uniqueId:(id)arg2 isUniqueEvent:(_Bool)arg3;
- (void)logCounterEvent:(id)arg1 count:(unsigned long long)arg2 parameters:(id)arg3 samplePercentage:(double)arg4;
- (void)logCounterEvent:(id)arg1 count:(unsigned long long)arg2 parameters:(id)arg3;
- (void)logTimedEvent:(id)arg1 interval:(double)arg2 parameters:(id)arg3 samplePercentage:(double)arg4;
- (void)logTimedEvent:(id)arg1 interval:(double)arg2 parameters:(id)arg3;
- (void)logTimedEvent:(id)arg1 interval:(double)arg2;
- (void)logCameraCreationDelaySubMetricsEndWithSignCode:(unsigned int)arg1;
- (void)logCameraCreationDelaySubMetricsStartWithSignCode:(unsigned int)arg1;
- (void)logManagedCapturerSettingFailure:(id)arg1 error:(id)arg2;
- (void)logRecordingWasTooShortWithFirstFrame:(CDStruct_1b6d18a9)arg1 frontFacingCamera:(_Bool)arg2 cameraFlips:(long long)arg3;
- (void)logRecordingMayBeTooShortWithMethod:(unsigned long long)arg1;
- (void)cancelCameraCreationEvent;
- (void)logPreviewFirstFramePlayed:(_Bool)arg1;
- (void)logPreviewAnimationComplete:(_Bool)arg1;
- (void)logPreviewDisplayedForImage:(_Bool)arg1;
- (void)logPreviewFinishedPreparation;
- (void)logCameraCaptureContentReady;
- (void)logCameraCaptureFinishedWithDuration:(double)arg1;
- (void)logPreCaptureOperationFinishedAt:(double)arg1;
- (void)logPreCaptureOperationRequestedAt:(double)arg1;
- (void)logStillImageCaptureApi:(id)arg1;
- (void)logCameraCaptureRecordingGestureFinishedAtTime:(double)arg1;
- (void)logCameraExposureAdjustmentDelayEndWithStrategy:(id)arg1;
- (void)logCameraExposureAdjustmentDelayStart;
- (void)logCameraCreationStartWithMethod:(unsigned long long)arg1 lensesEnabled:(_Bool)arg2 activeLensId:(id)arg3;
- (void)logCameraCreationDelayEnd;
- (_Bool)shouldLogCameraCreationDelay;
@property(retain, nonatomic) NSNumber *cameraCreationDelayLoggingStatus; // @dynamic cameraCreationDelayLoggingStatus;

@end

